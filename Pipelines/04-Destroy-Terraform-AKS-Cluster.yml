# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

# Define Variables
variables:
- name: PROD_ENVIRONMENT
  value: prod
  #system.debug: true

pool: Default
  

stages:
   - stage: Plan_Destroy
     jobs:
      - job: Plan_Destroy
        pool: Default
        steps:
        
        - task: DownloadPipelineArtifact@2
          displayName: Download Pipeline Artifacts
          inputs:
            buildType: 'specific'
            project: '646c722d-d000-4bba-8c30-e88741f322d5'
            definition: '8'
            specificBuildWithTriggering: true
            buildVersionToDownload: 'latest'
            targetPath: '$(Pipeline.Workspace)/terraform-build-artifacts'

        - task: TerraformInstaller@1
          displayName: Terraform Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(Pipeline.Workspace)/terraform-build-artifacts'
            backendServiceArm: 'terraform-aks-cluster-svc-conn'
            backendAzureRmResourceGroupName: 'terraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformstorage05'
            backendAzureRmContainerName: 'tfstatebackupfile'
            backendAzureRmKey: 'aks-prod.tfstate'
        
        
        - task: TerraformTask@5
          displayName: Destroy AKS Cluster
          inputs:
                 provider: 'azurerm'
                 command: 'destroy'
                 workingDirectory: '$(Pipeline.Workspace)/terraform-build-artifacts'
                 commandOptions: '-auto-approve'
                 environmentServiceNameAzureRM: 'terraform-aks-cluster-svc-conn'

