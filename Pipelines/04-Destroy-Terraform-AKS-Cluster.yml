trigger:
 branches:
   include:
     - main
 #paths:
   #include:
    # - Pipelines/01-Provision-terraform-aks-cluster.yml
    # - terraform-manifests

pool: Default
  
# Define Variables
variables:

- name: PROD_ENVIRONMENT
  value: prod




# #Stage-1: Terraform Validate Stage
#    ##Step-1: Publish Artifacts to Pipeline 
#    ##Step-2: Install Terraform 
#    ##Step-3: Validate Terraform Manifests

# stages:
#   - stage: TerraformValidate
#     jobs:
#       - job: TerraformValidateJob
#         continueOnError: false
#         steps:
#         - task: PublishPipelineArtifact@1
#           displayName: Publish Artifacts
#           inputs:
#             targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#             artifact: 'terraform-manifests-out'
#             publishLocation: 'pipeline'
#         - task: TerraformInstaller@1
#           displayName: Terraform Install
#           inputs:
#             terraformVersion: 'latest'
#         - task: TerraformTaskV4@4
#           displayName: Terraform Init
#           inputs:
#             provider: 'azurerm'
#             command: 'init'
#             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#             backendServiceArm: 'terraform-aks-cluster-svc-conn'
#             backendAzureRmResourceGroupName: 'terraform-storage-rg'
#             backendAzureRmStorageAccountName: 'terraformstorage05'
#             backendAzureRmContainerName: 'tfstatebackupfile'
#             backendAzureRmKey: 'aks-prod.tfstate'
#         - task: TerraformTaskV4@4
#           displayName: Terraform validate
#           inputs:
#             provider: 'azurerm'
#             command: 'validate'
#             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'



# Stage-2: Deploy Stages for PROD

## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize 
## Step-4: Terraform Plan 
## Step-5: Terraform Apply 
stages:
  
  - stage: DestroyPRODAKSCluster
    jobs:
      - deployment: DestroyPRODAKSCluster
        displayName: DestroyPRODAKSCluster
        pool: Default
        workspace:
          clean: all
        environment: $(PROD_ENVIRONMENT)
        strategy:
         runOnce:
           deploy:
            steps:
               - task: TerraformInstaller@1
                 displayName: Terraform Install
                 inputs:
                   terraformVersion: 'latest'
              
               - task: TerraformTaskV4@4
                 displayName: Terraform Init
                 inputs:
                   provider: 'azurerm'
                   command: 'init'
                   workingDirectory: '/home/dog/myagent/_work/7/terraform-manifests-out'
                   backendServiceArm: 'terraform-aks-cluster-svc-conn'
                   backendAzureRmResourceGroupName: 'terraform-storage-rg'
                   backendAzureRmStorageAccountName: 'terraformstorage05'
                   backendAzureRmContainerName: 'tfstatebackupfile'
                   backendAzureRmKey: 'aks-$(PROD_ENVIRONMENT).tfstate'
               
               - task: TerraformTaskV4@4
                 displayName: Terraform Destroy
                 inputs:
                   provider: 'azurerm'
                   command: 'destroy'
                   workingDirectory: '/home/dog/myagent/_work/7/terraform-manifests-out/prod-80.out'
                   #commandOptions: '/home/dog/myagent/_work/7/terraform-manifests-out/prod-80.out'
                   environmentServiceNameAzureRM: 'terraform-aks-cluster-svc-conn'