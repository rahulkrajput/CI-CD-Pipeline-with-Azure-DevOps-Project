# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

# Define Variables
variables:
- name: PROD_ENVIRONMENT
  value: prod
  #system.debug: true

pool: Default
  

stages:
   - stage: Plan_Destroy
     jobs:
      - job: Plan_Destroy
        pool: Default
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@1
          displayName: Terraform Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            backendServiceArm: 'terraform-aks-cluster-svc-conn'
            backendAzureRmResourceGroupName: 'terraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformstorage05'
            backendAzureRmContainerName: 'tfstatebackupfile'
            backendAzureRmKey: 'aks-prod.tfstate'
        
   - stage: Destroy_Infra
     jobs:
       
      - deployment: Destroy_Infra
        displayName: Destroy_Infra
        pool: Default
        workspace:
          clean: all
        environment: $(PROD_ENVIRONMENT)
        strategy:
         runOnce:
           deploy:
             steps:
             - task: TerraformInstaller@1
               inputs:
                 terraformVersion: 'latest'
             - task: TerraformTask@5
               inputs:
                 provider: 'azurerm'
                 command: 'init'
                 workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                 backendAzureRmUseEntraIdForAuthentication: false
                 backendServiceArm: 'terraform-aks-cluster-svc-conn'
                 backendAzureRmResourceGroupName: 'terraform-storage-rg'
                 backendAzureRmStorageAccountName: 'terraformstorage05'
                 backendAzureRmContainerName: 'tfstatebackupfile'
                 backendAzureRmKey: 'aks-prod.tfstate'
             - task: TerraformTask@5
               inputs:
                 provider: 'azurerm'
                 command: 'destroy'
                 workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                 commandOptions: '-auto-approve $(Pipeline.Workspace)/terraform-manifests-out/$(PROD_ENVIRONMENT)-$(Build.BuildId).out'
                 environmentServiceNameAzureRM: 'terraform-aks-cluster-svc-conn'

